//倍增LCA

#include<bits/stdc++.h>
using namespace std;
const int N = 500010,M = N*2;

int h[N],e[M],ne[M],cnt;
int dist[N];//深度
int f[N][20];//二进制优化 f<i,j>表示从i向上走2^j能到达的点
void add(int a,int b){
    e[cnt] = b,ne[cnt] = h[a],h[a] = cnt++;
}
int n,q,s;

void bfs(int u){//bfs预处理
    memset(dist,0x3f,sizeof dist);
    dist[0] = 0;
    dist[u] = 1;
    queue<int>q;
    q.push(u);
    while(q.size()){
        int x = q.front();q.pop();
        for(int i = h[x];~i; i = ne[i]){
            int j = e[i];
            if(dist[j] > dist[x] + 1){
                dist[j] = dist[x] + 1;
                q.push(j);
                f[j][0] = x;//j向上走1步是x
                for(int k = 1; k <= 19; k++){
                    f[j][k] = f[f[j][k - 1]][k - 1];//关键转移
                }
            }
        }
    }
}

int lca(int x,int y){
    if(dist[x] < dist[y])swap(x,y);
    for(int k = 19; k >= 0; k--){
        if(dist[f[x][k]] >= dist[y]){
            x = f[x][k];
        }
    }//使y和x在同一级
    if(x == y)return x;//需要加
    for(int k = 19; k >= 0; k--){
        if(f[x][k] != f[y][k]){
            x = f[x][k];
            y = f[y][k];
        }
    }
    return f[x][0];
}


int main(){
    //初始化
    memset(h,-1,sizeof h);
    scanf("%d%d%d",&n,&q,&s);
    for(int i = 1; i < n; i++){
        int a,b;
        scanf("%d%d",&a,&b);
        add(a,b);add(b,a);
    }    
    bfs(s);
    while(q--){
        int a,b;
        scanf("%d%d",&a,&b);
        printf("%d\n",lca(a,b));
    }

    return 0;
}


//DFS预处理
#include <iostream>
#include <cstring>
#include <algorithm>

using namespace std;
using ll = long long;
const int N = 100010;
struct P{
    int b,w;
};
int n,k;
int d[N],f[N][20];
ll dist[N];
int path[N];
vector<P>g[N];

void dfs(int u,int fa,ll val){//预处理
    dist[u] = dist[fa] + val;
    f[u][0] = fa;d[u] = d[fa] + 1;
    for(int i = 1; i <= 19; i++){
        f[u][i] = f[f[u][i - 1]][i - 1];
    }
    for(int i = 0 ; i < g[u].size(); i++){
        int j = g[u][i].b,w = g[u][i].w;
        if(j == fa)continue;
        dfs(j,u,w);
    }
}

int lca(int a, int b){
    if (d[a] < d[b]) swap(a, b);
    for (int k = 19; k >= 0; k -- )
        if (d[f[a][k]] >= d[b])
            a = f[a][k];
    if (a == b) return a;
    for (int k = 19; k >= 0; k -- )
        if (f[a][k] != f[b][k]){
            a = f[a][k];
            b = f[b][k];
        }
    return f[a][0];
}



ll get(int a,int b){
    a = path[a],b = path[b];
    return dist[a] + dist[b] - 2*dist[lca(a,b)];
}


int main(){
    cin >> n >> k;
    for(int i = 1; i < n ; i++){
        int a,b,w;
        cin >> a >> b >> w;
        g[a].push_back({b,w});
        g[b].push_back({a,w});
    }
    for(int i = 1; i <= k; i++)cin >> path[i];
    dfs(1,0,1);
    ll sum = 0;
    for(int i = 1; i < k ; i++){
        sum += get(i,i + 1);
    }
    for(int i = 1; i <= k; i++){
        ll now = sum;
        if(i == 1)now = sum - get(i,i + 1);
        else if(i == k)now = sum - get(i - 1,i);
        else now = sum - get(i - 1,i) - get(i, i + 1) + get(i - 1,i + 1);
        cout << now << " ";
    }
    return 0;
}