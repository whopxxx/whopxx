#define MOD ((int) 1e9 + 7)

// 矩阵快速幂模板开始

struct Matrix {
    int n, m;
    long long A[26][26];

    Matrix(int n, int m): n(n), m(m) { memset(A, 0, sizeof(A)); }

    Matrix operator*(const Matrix &o) const {
        Matrix r(n, o.m);
        for (int k = 0; k < m; k++) for (int i = 0; i < n; i++) for (int j = 0; j < o.m; j++)
            r.A[i][j] = (r.A[i][j] + A[i][k] * o.A[k][j]) % MOD;
        return r;
    }
};

Matrix power(Matrix a, long long b) {
    Matrix y(a.n, a.m);
    for (int i = 0; i < y.n; i++) y.A[i][i] = 1;
    for (; b; b >>= 1) {
        if (b & 1) y = y * a;
        a = a * a;
    }
    return y;
}

// 矩阵快速幂模板结束

----------------------------------------------------------------------------------------------------------------------------------

#include<bits/stdc++.h>
using namespace std;
using ll = long long;
const int mod = 1e9 + 7;
struct T{
    ll c[110][110];
};
ll n,k;
T operator *(const T&A,const T&B){
    T whp;
    memset(whp.c,0,sizeof whp.c);
    for(ll i = 1; i <= n; i++){
        for(ll j = 1; j <= n ; j++){
            for(ll k = 1; k <= n; k++){
                whp.c[i][j] = (whp.c[i][j] +  A.c[i][k]%mod * B.c[k][j]%mod)%mod;
            }
        }
    }
    return whp;
}


int main(){
    cin >> n >> k;
    T A;
    for(ll i = 1; i <= n; i++){
        for(ll j = 1; j <= n ; j++){
            cin >> A.c[i][j];
        }
    }
    
    T ans;
    memset(ans.c,0,sizeof ans.c);
    for(ll i = 1; i<= n ; i++)ans.c[i][i] = 1;
    
    while(k){
        if(k & 1){
            ans = ans * A;
        }
        A = A*A;
        k >>= 1;
    }
    for(ll i = 1; i <= n; i++){
        for(ll j = 1; j <= n ; j++){
            cout << ans.c[i][j] << " ";
        }
        puts("");
    }

    return 0;
}
