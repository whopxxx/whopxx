void solve(){
    int n;
    cin >> n;
    vector<int>g[n + 1];
    for(int i = 1; i < n; i++){
        int u,v;
        cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    vector<int>dfsl(n + 1); // dfsl
    vector<int>dfsr(n + 1); // dfsr
    int cnt = 0;
    function<void(int,int)>dfs = [&](int u,int fa){
        dfsl[u] = ++cnt;
        for(auto v:g[u]){
            if(v == fa)continue;
            dfs(v,u);
        }
        dfsr[u] = cnt;
    };
    dfs(1,0);
    // for(int i = 1; i <= n; i++){
    //     cout << dfsl[i] << ' ' << dfsr[i] << endl;
    // }
}






#include <bits/stdc++.h>
using namespace std;
#define int long long
#define endl '\n'
const int N = 100010;
const int mod= 1e9 + 7;
#define lson u<<1
#define rson u<<1|1 
// 区间修改，区间查询
struct SegTree{
    int l,r;
    int add,sum;
}tr[N << 2];

void pushup(int u){
    tr[u].sum = tr[lson].sum + tr[rson].sum;
}

void build(int u,int l,int r){
    tr[u] = {l,r,0};
    if(l == r){
        return;
    }
    int mid = l + r >> 1;
    build(lson,l,mid);
    build(rson,mid + 1,r);
    pushup(u);
}

void pushdown(int u){
    if(!tr[u].add)return;
    tr[lson].add += tr[u].add;
    tr[lson].sum += tr[u].add * (tr[lson].r - tr[lson].l + 1);
    tr[rson].add += tr[u].add;
    tr[rson].sum += tr[u].add * (tr[rson].r - tr[rson].l + 1);
    tr[u].add = 0;
}

void modify(int u,int l,int r,int k){
    if(tr[u].l >= l && tr[u].r <= r){
        tr[u].add += k;
        tr[u].sum += (tr[u].r - tr[u].l + 1) * k;
        return;
    }
    pushdown(u);
    if(l <= tr[lson].r)modify(lson,l,r,k);
    if(r >= tr[rson].l)modify(rson,l,r,k);
    // r >= mid + 1
    pushup(u);
}

int query(int u,int l,int r){
    if(tr[u].l >= l && tr[u].r <= r)return tr[u].sum;
    pushdown(u);
    int res = 0;
    if(l <= tr[lson].r)res += query(lson,l,r);
    if(r >= tr[rson].l)res += query(rson,l,r);
    return res;
}

void solve(){
    int n,q;
    cin >> n >> q;
    build(1,1,n); // 维护
    vector<int>g[n + 1];
    vector<int>w(n + 1);
    for(int i = 1; i <= n; i++){
        cin >> w[i];
    }
    for(int i = 1; i < n; i++){
        int u,v;
        cin >> u >> v;
        g[u].push_back(v);
        g[v].push_back(u);
    }
    vector<int>d(n + 1);// 深度
    vector<int>dfsl(n + 1); // dfsl
    vector<int>dfsr(n + 1); // dfsr
    vector<int>star(n + 1); // dfs序起始点
    int cnt = 0;
    vector<vector<int>>f(n + 1,vector<int>(20));
    function<void(int,int)>dfs = [&](int u,int fa){
        f[u][0] = fa;
        dfsl[u] = ++cnt;
        star[cnt] = u;
        d[u] = d[fa] + 1;
        for(int i = 1; i < 20; i++){
            f[u][i] = f[f[u][i - 1]][i - 1];
        }
        for(auto v:g[u]){
            if(v == fa)continue;
            dfs(v,u);
        }
        dfsr[u] = cnt;
    };
    dfs(1,0);
    // for(int i = 1; i <= n; i++){
    //     cout << dfsl[i] << ' ' << dfsr[i] << endl;
    // }
    for(int i = 1; i <= n; i++){
        modify(1,i,i,w[star[i]]);
    }

    function<int(int,int)>lca = [&](int a,int b){
        if(d[a] < d[b])swap(a,b);
        for(int i = 19; ~i; i--){
            if(d[f[a][i]] >= d[b])a = f[a][i];
        }
        if(a == b)return a;
        for(int i = 19; ~i; i--){
            if(f[a][i] != f[b][i]){
                a = f[a][i];
                b = f[b][i];
            }
        }
        return f[a][0];
    };

    int root = 1; // 维护root

    while(q--){
        int op;
        cin >> op;
        if(op == 1){
            cin >> root;
        }
        else if(op == 2){
            int u,v,x;
            cin >> u >> v >> x;
            int i = lca(u,v);
            int j = lca(u,root);
            int k = lca(v,root);
            if(d[i] > d[k])k = i;
            if(d[j] > d[k])k = j;
            
            int l = dfsl[k],r = dfsr[k];
            if(k == root){
                modify(1,1,n,x);
            }
            else if(dfsl[root] < l  || dfsl[root] > r)modify(1,l,r,x);
            else{
                int dp=d[root] - d[k] - 1;
                int son = root;
                for(int i = 19;~i;i--){
                    if(dp & (1 << i))son = f[son][i];
                }
                modify(1,1,n,x);
                modify(1,dfsl[son],dfsr[son], -x);
            }
        }
        else if(op == 3){
            int x;cin >> x;
            int l=dfsl[x],r=dfsr[x];
            if(x == root){
                cout << query(1,1,n) << endl;
            }
            else if(dfsl[root] < l || dfsl[root] > r)cout << query(1,l,r) << endl;
            else{
                int dp = d[root] - d[x] - 1;
                int son = root;
                for(int i = 19;~i;i--){
                    if(dp & (1 << i))son = f[son][i];
                }
                cout << query(1,1,n) - query(1,dfsl[son],dfsr[son]) << endl;
            }
        }
    }
}


signed main(){
    int _(1);
    // cin >> _;
    while(_--){
        solve();
    }
    return 0;
}