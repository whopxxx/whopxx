// A = p1^k1 * p2^k2 * p3^k3 .. * pn^kn

// 约数个数 = (k1 + 1)*(k2 + 1)*(k3 + 1)...

// 约数之和 = (p1^0 + p1^1 + .. + p1^k1)*(p2^0 + p2^1 + .. + p2^k1)...
// () + () + ()乘法原理



// sum(p,k) = p^0 + p^1 + p^2...p^K
//          = p^0 + p^1 + ... + p^(n/2) + p^(n/2+1) + .. +p^n
//          = p(n/2 + 1) * (p^0 + p1 + ... + p^(n/2))
//          = (1 + p(n/2 + 1)) * sum(p, k/2)
// ps:当K+1为奇数(k为偶数)时先算出最后一项加进去，其余为偶数项

#include<iostream>
using namespace std;

int A,B;
int mod = 9901;


int ksm(int a,int b){
    a %= mod;
    int ans = 1;
    while(b){
        if(b&1)ans = ans*a%mod;
        a = a*a %mod;
        b >>= 1;
    }
    return ans;
}

int sum(int p,int k){
    if(k == 0)return 1;
    if(k%2 == 0)return (p%mod *sum(p,k - 1) + 1)%mod;
    else return (1 + ksm(p,k/2 + 1))*sum(p,k/2)%mod;
}

int main(){
    cin >> A >> B;
    int ans = 1;
    for(int i = 2; i <= A; i++){
        int s = 0;
        while(A%i == 0){
            s++;
            A/=i;
        }
        if(s)ans = ans * sum(i,s*B)%mod;
    }
    if(!A)ans = 0;
    cout << ans;

    return 0;
}