//st表 区间查询

template<class T>
struct SparseTable {
    vector<vector<T>> st;
    vector<int> lg;
    // 传入的 vector 的下标必须以 1 为基础
    SparseTable(const vector<T> &s) {
        const int n = s.size() - 1;
        st.assign(n + 1, vector<T>(22, 0));
        lg.resize(n + 1);
        for (int i = 2 ; i <= n ; i++) {
            lg[i] = lg[i >> 1] + 1;
        }
        for (int i = 1 ; i <= n ; ++i) {
            st[i][0] = s[i];
        }
        for (int j = 1 ; j <= lg[n] ; j++) {
            for (int i = 1 ; i + (1 << j) - 1 <= n ; i++) {
                st[i][j] = max(st[i][j - 1], st[i + (1 << j - 1)][j - 1]);
            }
        }
    }
    T query(int L, int R) {
        int k = lg[R - L + 1];
        return max(st[L][k], st[R - (1 << k) + 1][k]);
    }
}; // SparseTable



template<typename T>
struct SparseTable
{
    int n;
    function<T(const T&,const T&)> func;
    vector<vector<T>> st;
    SparseTable(){}
    SparseTable(const vector<T> &init, const function<T(const T&,const T&) > f) : n(init.size()) , func(f) {
        int lg = __lg(n);
        st.assign(lg + 1 , vector<T>(n));
        st[0] = init;
        for (int i = 1;i <= lg;i++){
            for (int j = 0;j <= n - (1 << i);j++){
                st[i][j] = func(st[i-1][j],st[i-1][j + (1 << (i - 1))]);
            }
        }
        
    }
    T get(int L,int R){
        int lg = __lg(R - L);
        return func(st[lg][L],st[lg][R - (1 << lg)]);
    }
};

void solve(){   

    int n;
    cin >> n;

    vector<int> l(n),r(n);
    for (int i = 0;i < n;i++){
        cin >> l[i] >> r[i];
        l[i]--;
        r[i]--;
        if (l[i] > r[i]){
            swap(l[i], r[i]);
        }
    }
    vector<int> b(2 * n);
    for (int i = 0;i < n;i++){
        b[l[i]] = b[r[i]] = r[i];
    }
    SparseTable<int> st(b, [&](int x, int y){
        return max(x, y);
    });


    for (int i = 0;i < n;i++){
        if (l[i] + 1 == r[i])continue;
        if (st.get(l[i] + 1, r[i] + 1) > r[i]){
            cout << "Yes" << '\n';
            return;
        }
    }
    cout << "No" << '\n';
}   



signed main()
{
    ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);
    //cout << fixed << setprecision(3);
    int T = 1;
    //cin >> T;

    while (T--){
        solve();
    }
    return 0;
}