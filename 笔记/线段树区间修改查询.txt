#include <bits/stdc++.h>
using namespace std;
#define int long long
#define endl '\n'
const int N = 100010;
const int mod= 1e9 + 7;
#define lson u<<1
#define rson u<<1|1 
// 区间修改，区间查询
struct SegTree{
    int l,r;
    int add,sum;
}tr[N << 2];

void pushup(int u){
    tr[u].sum = tr[lson].sum + tr[rson].sum;
}

void build(int u,int l,int r){
    tr[u] = {l,r,0};
    if(l == r){
        return;
    }
    int mid = l + r >> 1;
    build(lson,l,mid);
    build(rson,mid + 1,r);
    pushup(u);
}

void pushdown(int u){
    if(!tr[u].add)return;
    tr[lson].add += tr[u].add;
    tr[lson].sum += tr[u].add * (tr[lson].r - tr[lson].l + 1);
    tr[rson].add += tr[u].add;
    tr[rson].sum += tr[u].add * (tr[rson].r - tr[rson].l + 1);
    tr[u].add = 0;
}

void modify(int u,int l,int r,int k){
    if(tr[u].l >= l && tr[u].r <= r){
        tr[u].add += k;
        tr[u].sum += (tr[u].r - tr[u].l + 1) * k;
        return;
    }
    pushdown(u);
    if(l <= tr[lson].r)modify(lson,l,r,k);
    if(r >= tr[rson].l)modify(rson,l,r,k);
    // r >= mid + 1
    pushup(u);
}

int query(int u,int l,int r){
    if(tr[u].l >= l && tr[u].r <= r)return tr[u].sum;
    pushdown(u);
    int res = 0;
    if(l <= tr[lson].r)res += query(lson,l,r);
    if(r >= tr[rson].l)res += query(rson,l,r);
    return res;
}



void solve(){
    int n,m;
    cin >> n >> m;
    build(1,1,n);
    for(int i = 1; i <= n; i++){
        int x;
        cin >> x;
        modify(1,i,i,x);
    }
    while(m--){
        int op;cin >> op;
        if(op == 1){
            int l,r,k;
            cin >> l >> r >> k;
            modify(1,l,r,k);
        }
        else{
            int l,r;cin >> l >> r;
            cout << query(1,l,r) << endl;
        }
    }
}


signed main(){
    int _(1);
    // cin >> _;
    while(_--){
        solve();
    }
    return 0;
}