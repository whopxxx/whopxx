#define _CRT_SECURE_NO_WARNINGS 1
 
#include<iostream>
using namespace std;
typedef long long ll;
#include<string>
#include<cstring>
#include<cstdio>
#include<cstdlib>
#include<vector>
#include<stack>
#include<queue>
#include<algorithm>
#include<cmath>
#include<iomanip>
#include<set>
#include<map>
const int m = 20105;
int n, p;
int a[(int)1e3 + 6];
int mp[(int)1e3+6][6][m];
int dfs(int x, int y, int w)
{
    if (x > n)
    {
        if (y == 6) return -2200000;
        else return 0;
    }
    if (mp[x][y - 1][w + p]) return mp[x][y - 1][w + p];
    mp[x][y - 1][w + p] = dfs(x + 1, y, w);
    if (y == 1) mp[x][y - 1][w + p] = max(mp[x][y - 1][w + p], dfs(x + 1, 2, w + a[x]));
    if (y == 2) mp[x][y - 1][w + p] = max(mp[x][y - 1][w + p], dfs(x + 1, 3, w - a[x]));
    if (y == 3) mp[x][y - 1][w + p] = max(mp[x][y - 1][w + p], dfs(x + 1, 4, w * a[x]));
    if (y == 4) mp[x][y - 1][w + p] = max(mp[x][y - 1][w + p], dfs(x + 1, 5, w - a[x]));
    if (y == 5) mp[x][y - 1][w + p] = max(mp[x][y - 1][w + p], dfs(x + 1, 6, 0) + w * a[x]);
    if (y == 6) mp[x][y - 1][w + p] = max(mp[x][y - 1][w + p], dfs(x + 1, 1, 0) - a[x]);
    return mp[x][y - 1][w + p];
}
int main()
{
    ios::sync_with_stdio(0); cin.tie(0);
    p = m / 2;
    cin >> n;
    for (int i = 1;i <= n;i++) cin >> a[i];
    cout << dfs(1, 1, 0) << '\n';
    return 0;
}