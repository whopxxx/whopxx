#include<iostream>
#include<bits/stdc++.h>
using namespace std;
using ll = long long;
using pii = pair<int,int>;
const int N = 40;
const int inf = 0x3f3f3f3f;
const int mod = 1e9 + 7;

unordered_map<int,int>l,r,indx;
int h[N],q[N];


int built(int il,int ir,int ql,int qr){
    int root = h[qr];
    int k = indx[root];
    if(il < k)l[root] = built(il, k - 1, ql, k - 1 - il + ql);
    if(ir > k)r[root] = built(k + 1, ir,k - 1 - il + ql + 1,qr - 1);
    return root;
}

void bfs(int st){
    queue<int>q;
    q.push(st);
    while(q.size()){
        auto i = q.front();q.pop();
        printf("%d ",i);
        if(l.count(i))q.push(l[i]);
        if(r.count(i))q.push(r[i]);
    }
}

void solve(){
    int n;
    cin >> n;
    for(int i = 1; i <= n ;i++)cin>>h[i];
    for(int i = 1; i <= n ;i++){
        cin >> q[i];
        indx[q[i]] = i;
    }
    int root = built(1,n,1,n);
    bfs(root);
}

signed main(){
	ios::sync_with_stdio(0);
	cin.tie(0);cout.tie(0);
	int t;
	t = 1;
	while(t--){
		solve();
	}
	return 0;
}