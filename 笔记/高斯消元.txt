#include<iostream>
#include<cstdio>
#include<algorithm>
#include<cstring>
#include<cmath>
using namespace std;
const int N = 105;
const double eps = 1e-6;
int n;
double a[N][N];
int gauss() {
    int c, r;
    for (c = 0, r = 0; c < n; c++) { //枚举每一行
        int t = r;
        for (int i = r; i < n; i++)
            if (fabs(a[i][c]) > fabs(a[t][c])) //找到绝对值最大的一行
                t = i;
        if (fabs(a[t][c]) < eps) continue;
        for (int i = c; i < n + 1; i++) swap(a[t][i], a[r][i]); //将该行换上去
        for (int i = n; i >= c; i--) a[r][i] /= a[r][c]; //将该行的第一个系数变为1
        for (int i = r + 1; i < n; i++)
            if (fabs(a[i][c]) > eps)
                for (int j = n; j >= c; j--)
                    a[i][j] -= a[r][j] * a[i][c]; //将下面所有行的第c列消成0
        r++;
    }
    if (r < n) {
        for (int i = r; i < n; i++) {
            if (fabs(a[i][n]) > eps)
                return 2; //无解
        }
        return 1; //有无穷多组解
    }
    for (int i = n; i >= 0; i--)
        for (int j = i + 1; j < n; j++)
            a[i][n] -= a[j][n] * a[i][j];
    return 0;
}

int main() {
    scanf("%d", &n);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n + 1; j++)
            scanf("%lf", &a[i][j]);
    int t = gauss();
    if (t == 0) {
        for (int i = 0; i < n; i++) printf("%.2lf\n", a[i][n]);
    }
    else if (t == 1) printf("Infinite group solutions");
    else printf("No solution");
    return 0;
}